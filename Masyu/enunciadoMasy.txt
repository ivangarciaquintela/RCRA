Introducción

En este ejercicio jugaremos con clingo para encontrar soluciones al puzzle Masyu. 
Masyu es un puzzle que consiste en dibujar segmentos entre puntos de una cuadrícula de N x N de forma que todos los segmentos formen un único camino cíclico. 
Algunos puntos de la cuadrícula pueden marcarse con un círculo negro o blanco. Las restricciones del puzzle son las siguientes:

    1.Todas las aristas deben formar un único bucle lineal. No se permiten cruces ni ramificaciones.
    2.El bucle debe pasar por todos los círculos.
    3.Cada círculo blanco debe ser atravesado en línea recta, pero debe haber algún giro en su punto anterior o en el siguiente (o en ambos).
    4.Cada círculo negro debe estar siempre en la esquina de una vuelta, pero sus puntos anterior y siguiente no pueden contener vueltas.

Para entender las reglas del juego, puedes probar a jugar online en https://es.puzzle-masyu.com/.

Pasos

1. Codifique el problema Masyu como un programa ASP que resuelva el puzzle para cualquier instancia. Este programa es nuestra Base de Conocimientos y se llamará masyuKB.lp

2.Cada instancia de puzzle se proporcionará como un archivo ASCII masyuX.txt con el siguiente formato. 
    Cada línea contiene n puntos separados por espacios en blanco (es decir, cada línea tiene 2*n-1 caracteres seguidos de una nueva línea). 
    Un punto "." representa un punto de cuadrícula regular sin ninguna restricción, un "0" representa un círculo blanco y un "1" un círculo negro. 
    A modo de ejemplo, el archivo de entrada para el escenario de la imagen anterior podría tener el siguiente aspecto:
            1 . . . . .
                    
            . . . . 0 .
                    
            1 0 . . . .
                    
            . . . . 0 0
                    
            . . 1 . . .
                    
            . 0 . . 0 .

    Observe que dejamos un espacio en blanco entre cada dos columnas y una línea en blanco (con 2*n-1 espacios en blanco) 
    entre cada dos filas. Utilizaremos el programa python encode.py que toma el fichero masyuX.txt como entrada y crea un fichero 
    masyuX.lp que describe la instancia como un conjunto de hechos ASP de la forma "negro(N)" o "blanco(N)" donde N es el número 
    de un punto de 0 a n x n - 1, navegando de arriba a abajo y de izquierda a derecha. Un ejemplo de uso podría ser:
    > python3 encode.py masyu02.txt masyu02.lp

    obtener el conjunto de hechos
    #const n=6.
    black(0;12;26).
    white(10;13;22;23;31;34).

3. Finalmente, traduciremos el conjunto de respuestas a una solución Masyu completa, 
    imprimiendo el resultado final en la salida estándar. La solución será sólo una copia 
    del archivo de entrada donde hemos llenado los bordes con líneas horizontales "-" o verticales "|" como se muestra a continuación:
                1-.-.-.-.-.
                |         |
                . . . .-0-.
                |     |   
                1-0-. . .-.
                    | | | |
                . . . . 0 0
                    | | | |
                .-.-1 .-. .
                |         |
                .-0-.-.-0-.

 Para imprimir esta salida podemos utilizar el programa python decode.py de la siguiente manera:
 > python3 decode.py masyuKB.lp masyu02.lp > solution02.txt

Este programa utiliza el predicado "seg(N,M)" que nos indica que debemos dibujar un segmento entre los 
puntos adyacentes N y M, donde N y M son números de punto utilizando la misma numeración que en la entrada masyu02.lp


4. NUEVO: (7 de mayo). Se han añadido o actualizado los siguientes archivos :
 - encode.py : Ahora toma los nombres de los ficheros de entrada y salida como argumentos. Ya no utiliza la entrada estándar "<" ni la salida estándar ">".
 - decode.py : La versión anterior esperaba un dato "size(n)." para averiguar el tamaño de la rejilla. Ahora este dato se añade automáticamente antes de dibujar
 - masyu-examples.zip : Este archivo zip incluye ahora dos nuevas instancias, masyu07.txt (size=20) y masyu08.txt (size=25) con sus respectivas soluciones.
 - drawmasyu.lp : Puede utilizar este código junto con el programa python display.py para una visualización gráfica de la solución de su puzzle. 
    Como ejemplo de uso: > python3 display.py masyuKB.lp masyu02.lp drawmasyu.lp

